@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin bp($prop, $break1, $break2: '') {
  //$break1: breakpoint($break1);
  //$break2: breakpoint($break2);
  @if $prop == min {
    @media screen and (min-width: em($break1)) {
      @content
    }
  }
  @else if $prop == max {
    @media screen and (max-width: em(-1 + $break1)) {
      @content
    }
  }
  @else if $prop == min-max {
    @media screen and (min-width: em($break1)) and (max-width: em($break2)) {
      @content
    }
  }
}

@mixin bp-h($prop, $break1, $break2: '') {
  //$break1: breakpoint($break1);
  //$break2: breakpoint($break2);
  @if $prop == min {
    @media screen and (min-height: em($break1)) {
      @content;
    }
  }
  @else if $prop == max {
    @media screen and (max-height: em($break1)) {
      @content;
    }
  }
  @else if $prop == min-max {
    @media screen and (min-height: em($break1)) and (max-height: em($break2)) {
      @content;
    }
  }
}

@mixin unit($property, $factor: 1) {
  #{$property}: $grid-unit * $factor;
  @include bp(min, $grid-fluid-max-width) {
    #{$property}: ($grid-fluid-max-width / $grid-column-count) * $factor * 1px;
  }
}

@mixin optimize-type {
  text-rendering: optimizeLegibility;
  font-feature-settings: "kern";
  -webkit-font-feature-settings: "kern";
  -moz-font-feature-settings: "kern";
  -moz-font-feature-settings: "kern=1";
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}
